{"version":3,"file":"functions.js","mappings":"m8CAYA,SAAgBA,EAAUC,EAAqBC,GAC7C,IAAIC,EAAS,EACPC,EAAQC,aAAY,WACxBF,GAAUF,EACVC,EAAWI,UAAUH,EACvB,GAAG,KAEHD,EAAWK,WAAa,WACtBC,cAAcJ,EAChB,CACF,CAiDA,SAAsBK,EAAMC,EAAYC,EAAgBC,G,0HAWvC,OAVfC,QAAQC,IAAI,SAAUF,GAClBG,EACJ,CACEC,KAAM,QACNN,GAAEA,EACFC,MAAKA,EACLC,KAAIA,GAENC,QAAQC,IAAI,oBAEG,GAAMG,MAAM,gCAAiC,CAC1DC,OAAQ,OACRC,KAAMC,KAAKC,UAAUN,GACrBO,QAAS,CACP,eAAgB,mBAChBC,OAAQ,uB,OAKZ,KAVIC,EAAWC,EAAAC,QAUDC,GAGZ,MAFAd,QAAQC,IAAI,0BAEN,IAAIc,MAAM,uBAAAC,OAAuBL,EAASM,SAIR,OAD1CjB,QAAQC,IAAI,oBAC8B,GAAMU,EAASO,Q,OAQzD,GARIC,EAAsCP,EAAAC,OAC1Cb,QAAQC,IAAIkB,EAAcF,QAGpBG,EAA0B,GAIN,KAFpBC,EAAad,KAAKe,MAAMH,EAAc7B,SAE7BiC,OACb,MAAO,CAAC,EAAD,CAAC,8BAEV,IAIE,IAAWC,KAHLC,EAAOC,OAAOD,KAAKJ,EAAW,IAEhCM,EAAY,GACEF,EAChBE,EAAUC,KAAKH,EAAKD,IAGtB,IADAJ,EAAYQ,KAAKD,GACjBE,EAAA,EAAoBC,EAAAT,EAAAQ,EAAAC,EAAAP,OAAAM,IAAY,CAE5B,IAFOE,EAAKD,EAAAD,GACVG,EAAc,GAChBC,EAAA,EAAkBC,EAAAT,EAAAQ,EAAAC,EAAAX,OAAAU,IAAPT,EAAGU,EAAAD,GACZD,EAAYJ,KAAKG,EAAMP,IAE3BJ,EAAYQ,KAAKI,E,CAInB,OADAhC,QAAQmC,MAAMf,GACP,CAAP,EAAOA,E,CAET,MAAOgB,GAEL,OADApC,QAAQC,IAAI,uBAAwBmC,GAC7B,CAAC,EAAD,CAAC,CAAC,U,kBAWb,SAAsBC,EAAkBxC,G,wGAQvB,OAPXK,EACJ,CACEC,KAAM,kBACNN,GAAEA,GAEJG,QAAQC,IAAI,oBAEG,GAAMG,MAAM,gCAAiC,CAC1DC,OAAQ,OACRC,KAAMC,KAAKC,UAAUN,GACrBO,QAAS,CACP,eAAgB,mBAChBC,OAAQ,uB,OAKZ,KAVIC,EAAWsB,EAAApB,QAUDC,GAGZ,MAFAd,QAAQC,IAAI,0BAEN,IAAIc,MAAM,uBAAAC,OAAuBL,EAASM,SAIE,OADpDjB,QAAQC,IAAI,oBACwC,GAAMU,EAASO,Q,OAA/DC,EAAgDc,EAAApB,OACpDb,QAAQC,IAAIkB,EAAcF,QAG1B,IAaE,OAXQqB,EAA6B,GAE/BC,EAAUpB,EAAcoB,QACThC,KAAKe,MAAMiB,GACjBC,SAAQ,SAACC,GAEtBH,EAAeV,KAAK,CAACa,EAAGC,SACxBJ,EAAeV,KAAK,CAACa,EAAGE,oBACxBL,EAAeV,KAAK,CAAC,IACvB,IAEO,CAAP,EAAOU,E,CAET,MAAOF,GAEL,OADApC,QAAQC,IAAI,uBAAwBmC,GAC7B,CAAP,EAAO,Q,kHAhLXQ,EAAAA,UAAAzD,EA2DAyD,EAAAA,MAAAhD,EAuEAgD,EAAAA,kBAAAP,EAiDAQ,gBAAgBC,UAAU,YAAa3D,GACvC0D,gBAAgBC,UAAU,QAASlD,GACnCiD,gBAAgBC,UAAU,oBAAqBT,E,IC7L3B,OAAO,EADD,CAAC,E","sources":["webpack://excel-custom-functions/./src/functions/functions.ts","webpack://excel-custom-functions/webpack/startup"],"sourcesContent":["/* eslint-disable no-unreachable */\n/* eslint-disable prettier/prettier */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* global clearInterval, console, CustomFunctions, setInterval */\nimport * as reqres from \"./reqres\";\n\n/**\n * Increments a value once a second.\n * @customfunction\n * @param incrementBy Amount to increment\n * @param invocation Custom function handler\n */\nexport function increment(incrementBy: number, invocation: CustomFunctions.StreamingInvocation<number>): void {\n  let result = 0;\n  const timer = setInterval(() => {\n    result += incrementBy;\n    invocation.setResult(result);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n// /**\n//  * Sends a login request to the http server and returns the response.\n//  * @customfunction LOGIN\n//  * @param username User's username\n//  * @param password User's password\n//  * @returns number representing http status response of auth request\n//  */\n// export async function login(username: string, password: string,) {\n//   let request: reqres.LoginRequest = \n//   {\n//     type: \"Login\",\n//     username,\n//     password,\n//   };\n//   console.log(\"attempting login\");\n//   // eslint-disable-next-line no-undef\n//   let response = await fetch(\"http://localhost:4200/process\", {\n//     method: \"POST\",\n//     body: JSON.stringify(request),\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//       Accept: \"application/json\",\n//     },\n//   });\n\n  \n//   if (!response.ok) {\n//     console.log(\"err ${response.status}\");\n//     throw new Error(`HTTP error! status: ${response.status}`);\n//   }\n\n//   console.log(\"server responded\");\n//   let loginResponse: reqres.LoginResponse = await response.json();\n//   console.log(loginResponse.status)\n//   //invocation.setResult(String(loginResponse.status));\n//   return loginResponse.status;\n// }\n\n/**\n * Sends a query request to the http server and returns the .response.\n * @customfunction QUERY\n * @param id User's username\n * @param cache boolean representing whether to used cached query results\n * @param {string[]} args User's password\n * @returns {string[][]} number spill array representing the return data of of the query or an error message\n */\n\nexport async function query(id: string, cache: boolean, args: string[]) {\n  console.log(\"args: \", args);\n  let request: reqres.QueryRequest = \n  {\n    type: \"Query\",\n    id,\n    cache,\n    args,\n  };\n  console.log(\"attempting query\");\n  // eslint-disable-next-line no-undef\n  let response = await fetch(\"http://localhost:4200/process\", {\n    method: \"POST\",\n    body: JSON.stringify(request),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n  });\n\n  \n  if (!response.ok) {\n    console.log(\"err ${response.status}\");\n    //not actually sure what happens on the excel side if an error is thrown\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n\n  console.log(\"server responded\");\n  let queryResponse: reqres.QueryResponse = await response.json();\n  console.log(queryResponse.status)\n  //TODO: convert json response to spill array\n  \n  const resultArray: string[][] = [];\n\n  const resultJson = JSON.parse(queryResponse.result) as Record<string, string>[];\n\n  if (resultJson.length === 0) {\n    return [\"Error: Empty query result\"];\n  }\n  try{\n    const keys = Object.keys(resultJson[0]);\n    \n    var keysArray = [];\n    for (const key in keys) {\n      keysArray.push(keys[key]);\n    }\n    resultArray.push(keysArray);\n    for (const entry of resultJson) {\n      var valuesArray = [];\n        for (const key of keys) {\n          valuesArray.push(entry[key]);\n        }\n      resultArray.push(valuesArray);\n    }\n\n    console.table(resultArray);\n    return resultArray;\n  }  \n  catch (error) {\n    console.log('Error parsing JSON: ', error);\n    return [[\"error\"]];\n\n}\n}\n\n/**\n * Sends a get query prompts request to the http server and returnes the response.\n * @customfunction GET_QUERY_PROMPTS\n * @param id User's username\n * @returns {string[][]} number spill array representing the return data of of the query or an error message\n */\nexport async function get_query_prompts(id: string) {\n  let request: reqres.GetQueryPromptsRequest = \n  {\n    type: \"GetQueryPrompts\",\n    id,\n  };\n  console.log(\"attempting query\");\n  // eslint-disable-next-line no-undef\n  let response = await fetch(\"http://localhost:4200/process\", {\n    method: \"POST\",\n    body: JSON.stringify(request),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n  });\n\n  \n  if (!response.ok) {\n    console.log(\"err ${response.status}\");\n    //not actually sure what happens on the excel side if an error is thrown\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n\n  console.log(\"server responded\");\n  let queryResponse: reqres.GetQueryPromptsResponse = await response.json();\n  console.log(queryResponse.status)\n  \n  \n  try {\n\n      const formattedArray: string[][] = [];\n      \n      let prompts = queryResponse.prompts;\n      let prompts_json = JSON.parse(prompts);\n      prompts_json.forEach((pr: { prompt: string; promptDescription: string; }) => {\n      //let pr = JSON.parse(prompt);\n      formattedArray.push([pr.prompt]);\n      formattedArray.push([pr.promptDescription]);\n      formattedArray.push(['']);\n    });\n\n    return formattedArray;\n  }\n  catch (error) {\n    console.log('Error parsing JSON: ', error);\n    return \"error\";\n  }\n}\nCustomFunctions.associate(\"INCREMENT\", increment);\nCustomFunctions.associate(\"QUERY\", query);\nCustomFunctions.associate(\"GET_QUERY_PROMPTS\", get_query_prompts);","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[26098](0, __webpack_exports__);\n"],"names":["increment","incrementBy","invocation","result","timer","setInterval","setResult","onCanceled","clearInterval","query","id","cache","args","console","log","request","type","fetch","method","body","JSON","stringify","headers","Accept","response","_b","sent","ok","Error","concat","status","json","queryResponse","resultArray","resultJson","parse","length","key","keys","Object","keysArray","push","_i","resultJson_1","entry","valuesArray","_a","keys_1","table","error","get_query_prompts","formattedArray_1","prompts","forEach","pr","prompt","promptDescription","exports","CustomFunctions","associate"],"sourceRoot":""}