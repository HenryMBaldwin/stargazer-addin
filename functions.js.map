{"version":3,"file":"functions.js","mappings":"m8CAuEA,SAAsBA,EAAMC,EAAYC,EAAgBC,G,0HAWvC,OAVfC,QAAQC,IAAI,SAAUF,GAClBG,EACJ,CACEC,KAAM,QACNN,GAAEA,EACFC,MAAKA,EACLC,KAAIA,GAENC,QAAQC,IAAI,oBAEG,GAAMG,MAAM,gCAAiC,CAC1DC,OAAQ,OACRC,KAAMC,KAAKC,UAAUN,GACrBO,QAAS,CACP,eAAgB,mBAChBC,OAAQ,uB,OAKZ,KAVIC,EAAWC,EAAAC,QAUDC,GAGZ,MAFAd,QAAQC,IAAI,0BAEN,IAAIc,MAAM,uBAAAC,OAAuBL,EAASM,SAIR,OAD1CjB,QAAQC,IAAI,oBAC8B,GAAMU,EAASO,Q,OAQzD,GARIC,EAAsCP,EAAAC,OAC1Cb,QAAQC,IAAIkB,EAAcF,QAGpBG,EAA0B,GAIN,KAFpBC,EAAad,KAAKe,MAAMH,EAAcI,SAE7BC,OACb,MAAO,CAAC,EAAD,CAAC,8BAEV,IAIE,IAAWC,KAHLC,EAAOC,OAAOD,KAAKL,EAAW,IAEhCO,EAAY,GACEF,EAChBE,EAAUC,KAAKH,EAAKD,IAGtB,IADAL,EAAYS,KAAKD,GACjBE,EAAA,EAAoBC,EAAAV,EAAAS,EAAAC,EAAAP,OAAAM,IAAY,CAE5B,IAFOE,EAAKD,EAAAD,GACVG,EAAc,GAChBC,EAAA,EAAkBC,EAAAT,EAAAQ,EAAAC,EAAAX,OAAAU,IAAPT,EAAGU,EAAAD,GACZD,EAAYJ,KAAKG,EAAMP,IAE3BL,EAAYS,KAAKI,E,CAInB,OADAjC,QAAQoC,MAAMhB,GACP,CAAP,EAAOA,E,CAET,MAAOiB,GAEL,OADArC,QAAQC,IAAI,uBAAwBoC,GAC7B,CAAC,EAAD,CAAC,CAAC,U,kBAWb,SAAsBC,EAAkBzC,G,wGAQvB,OAPXK,EACJ,CACEC,KAAM,kBACNN,GAAEA,GAEJG,QAAQC,IAAI,oBAEG,GAAMG,MAAM,gCAAiC,CAC1DC,OAAQ,OACRC,KAAMC,KAAKC,UAAUN,GACrBO,QAAS,CACP,eAAgB,mBAChBC,OAAQ,uB,OAKZ,KAVIC,EAAWuB,EAAArB,QAUDC,GAGZ,MAFAd,QAAQC,IAAI,0BAEN,IAAIc,MAAM,uBAAAC,OAAuBL,EAASM,SAIE,OADpDjB,QAAQC,IAAI,oBACwC,GAAMU,EAASO,Q,OAA/DC,EAAgDe,EAAArB,OACpDb,QAAQC,IAAIkB,EAAcF,QAG1B,IAaE,OAXQsB,EAA6B,GAE/BC,EAAUrB,EAAcqB,QACTjC,KAAKe,MAAMkB,GACjBC,SAAQ,SAACC,GAEtBH,EAAeV,KAAK,CAACa,EAAGC,SACxBJ,EAAeV,KAAK,CAACa,EAAGE,oBACxBL,EAAeV,KAAK,CAAC,IACvB,IAEO,CAAP,EAAOU,E,CAET,MAAOF,GAEL,OADArC,QAAQC,IAAI,uBAAwBoC,GAC7B,CAAP,EAAO,Q,sGArHXQ,EAAAA,MAAAjD,EAuEAiD,EAAAA,kBAAAP,EAiDAQ,gBAAgBC,UAAU,QAASnD,GACnCkD,gBAAgBC,UAAU,oBAAqBT,E,IC5L3B,OAAO,EADD,CAAC,E","sources":["webpack://excel-custom-functions/./src/functions/functions.ts","webpack://excel-custom-functions/webpack/startup"],"sourcesContent":["/* eslint-disable no-unreachable */\r\n/* eslint-disable prettier/prettier */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/* global clearInterval, console, CustomFunctions, setInterval */\r\nimport * as reqres from \"./reqres\";\r\n\r\n/**\r\n * Increments a value once a second.\r\n * @customfunction\r\n * @param incrementBy Amount to increment\r\n * @param invocation Custom function handler\r\n */\r\n// export function increment(incrementBy: number, invocation: CustomFunctions.StreamingInvocation<number>): void {\r\n//   let result = 0;\r\n//   const timer = setInterval(() => {\r\n//     result += incrementBy;\r\n//     invocation.setResult(result);\r\n//   }, 1000);\r\n\r\n//   invocation.onCanceled = () => {\r\n//     clearInterval(timer);\r\n//   };\r\n// }\r\n\r\n// /**\r\n//  * Sends a login request to the http server and returns the response.\r\n//  * @customfunction LOGIN\r\n//  * @param username User's username\r\n//  * @param password User's password\r\n//  * @returns number representing http status response of auth request\r\n//  */\r\n// export async function login(username: string, password: string,) {\r\n//   let request: reqres.LoginRequest = \r\n//   {\r\n//     type: \"Login\",\r\n//     username,\r\n//     password,\r\n//   };\r\n//   console.log(\"attempting login\");\r\n//   // eslint-disable-next-line no-undef\r\n//   let response = await fetch(\"http://localhost:4200/process\", {\r\n//     method: \"POST\",\r\n//     body: JSON.stringify(request),\r\n//     headers: {\r\n//       \"Content-Type\": \"application/json\",\r\n//       Accept: \"application/json\",\r\n//     },\r\n//   });\r\n\r\n  \r\n//   if (!response.ok) {\r\n//     console.log(\"err ${response.status}\");\r\n//     throw new Error(`HTTP error! status: ${response.status}`);\r\n//   }\r\n\r\n//   console.log(\"server responded\");\r\n//   let loginResponse: reqres.LoginResponse = await response.json();\r\n//   console.log(loginResponse.status)\r\n//   //invocation.setResult(String(loginResponse.status));\r\n//   return loginResponse.status;\r\n// }\r\n\r\n/**\r\n * Sends a query request to the http server and returns the .response.\r\n * @customfunction QUERY\r\n * @param id User's username\r\n * @param cache boolean representing whether to used cached query results\r\n * @param {string[]} args User's password\r\n * @returns {string[][]} number spill array representing the return data of of the query or an error message\r\n */\r\n\r\nexport async function query(id: string, cache: boolean, args: string[]) {\r\n  console.log(\"args: \", args);\r\n  let request: reqres.QueryRequest = \r\n  {\r\n    type: \"Query\",\r\n    id,\r\n    cache,\r\n    args,\r\n  };\r\n  console.log(\"attempting query\");\r\n  // eslint-disable-next-line no-undef\r\n  let response = await fetch(\"http://localhost:4200/process\", {\r\n    method: \"POST\",\r\n    body: JSON.stringify(request),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n  });\r\n\r\n  \r\n  if (!response.ok) {\r\n    console.log(\"err ${response.status}\");\r\n    //not actually sure what happens on the excel side if an error is thrown\r\n    throw new Error(`HTTP error! status: ${response.status}`);\r\n  }\r\n\r\n  console.log(\"server responded\");\r\n  let queryResponse: reqres.QueryResponse = await response.json();\r\n  console.log(queryResponse.status)\r\n  //TODO: convert json response to spill array\r\n  \r\n  const resultArray: string[][] = [];\r\n\r\n  const resultJson = JSON.parse(queryResponse.result) as Record<string, string>[];\r\n\r\n  if (resultJson.length === 0) {\r\n    return [\"Error: Empty query result\"];\r\n  }\r\n  try{\r\n    const keys = Object.keys(resultJson[0]);\r\n    \r\n    var keysArray = [];\r\n    for (const key in keys) {\r\n      keysArray.push(keys[key]);\r\n    }\r\n    resultArray.push(keysArray);\r\n    for (const entry of resultJson) {\r\n      var valuesArray = [];\r\n        for (const key of keys) {\r\n          valuesArray.push(entry[key]);\r\n        }\r\n      resultArray.push(valuesArray);\r\n    }\r\n\r\n    console.table(resultArray);\r\n    return resultArray;\r\n  }  \r\n  catch (error) {\r\n    console.log('Error parsing JSON: ', error);\r\n    return [[\"error\"]];\r\n\r\n}\r\n}\r\n\r\n/**\r\n * Sends a get query prompts request to the http server and returnes the response.\r\n * @customfunction GET_QUERY_PROMPTS\r\n * @param id User's username\r\n * @returns {string[][]} number spill array representing the return data of of the query or an error message\r\n */\r\nexport async function get_query_prompts(id: string) {\r\n  let request: reqres.GetQueryPromptsRequest = \r\n  {\r\n    type: \"GetQueryPrompts\",\r\n    id,\r\n  };\r\n  console.log(\"attempting query\");\r\n  // eslint-disable-next-line no-undef\r\n  let response = await fetch(\"http://localhost:4200/process\", {\r\n    method: \"POST\",\r\n    body: JSON.stringify(request),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n  });\r\n\r\n  \r\n  if (!response.ok) {\r\n    console.log(\"err ${response.status}\");\r\n    //not actually sure what happens on the excel side if an error is thrown\r\n    throw new Error(`HTTP error! status: ${response.status}`);\r\n  }\r\n\r\n  console.log(\"server responded\");\r\n  let queryResponse: reqres.GetQueryPromptsResponse = await response.json();\r\n  console.log(queryResponse.status)\r\n  \r\n  \r\n  try {\r\n\r\n      const formattedArray: string[][] = [];\r\n      \r\n      let prompts = queryResponse.prompts;\r\n      let prompts_json = JSON.parse(prompts);\r\n      prompts_json.forEach((pr: { prompt: string; promptDescription: string; }) => {\r\n      //let pr = JSON.parse(prompt);\r\n      formattedArray.push([pr.prompt]);\r\n      formattedArray.push([pr.promptDescription]);\r\n      formattedArray.push(['']);\r\n    });\r\n\r\n    return formattedArray;\r\n  }\r\n  catch (error) {\r\n    console.log('Error parsing JSON: ', error);\r\n    return \"error\";\r\n  }\r\n}\nCustomFunctions.associate(\"QUERY\", query);\nCustomFunctions.associate(\"GET_QUERY_PROMPTS\", get_query_prompts);","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[26098](0, __webpack_exports__);\n"],"names":["query","id","cache","args","console","log","request","type","fetch","method","body","JSON","stringify","headers","Accept","response","_b","sent","ok","Error","concat","status","json","queryResponse","resultArray","resultJson","parse","result","length","key","keys","Object","keysArray","push","_i","resultJson_1","entry","valuesArray","_a","keys_1","table","error","get_query_prompts","formattedArray_1","prompts","forEach","pr","prompt","promptDescription","exports","CustomFunctions","associate"],"sourceRoot":""}